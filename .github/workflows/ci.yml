name: Continuous Integration (CI)

on:
    push:
      branches:
        - develop
    pull_request:
      branches:
        - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'  

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
            path: ~\sonar\cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Install dependencies
        run: dotnet restore

      - name: Build the project
        run: dotnet build --configuration Release

      - name: Test and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /k:"rafaelbarjud_RSBTechnology.Framework" \
            /o:"rafaelbarjud" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="TestResults/**/coverage.opencover.xml"

          dotnet test \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults \
            --logger trx \
            /p:CoverletOutputFormat=opencover

          echo "Verificando arquivos gerados..."
          ls -R TestResults

          report_path=$(find TestResults -name "coverage.opencover.xml" | head -n 1)
          
          if [ -f "$report_path" ]; then
            echo "Coverage report found: $report_path"
          else
            echo "No coverage report found!"
            exit 1
          fi

          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  create-pull-request:
    runs-on: ubuntu-latest
    needs: [build]  
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PULL_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          github.rest.pulls.create({
            owner,
            repo,
            title: "Merge develop into main - V1.0.${{ github.run_number }}",
            head: "develop",
            base: "main",
            body: "Atualizando a branch main com as mudan√ßas mais recentes da branch develop."
          });
        
    